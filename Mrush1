import logging
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω, ID –≥—Ä—É–ø–ø—ã –∏ ID –∫–∞–Ω–∞–ª–∞
TOKEN = '7811217897:AAEkSqI8YrQ5OHtY6eA5Axgxoxuk0CdciiY'
GROUP_CHAT_ID = '-1002685541538'
CHANNEL_ID = '@asdfht12'  # –í–∞—à –∫–∞–Ω–∞–ª

# –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–º–∞—Ç)
FORBIDDEN_WORDS = {'—Å—É–∫–∞', '–±–ª—è—Ç—å', '–ø–∏–∑–¥–µ—Ü', '—Ö—É–π', '–µ–±–∞—Ç—å'}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_posts = {}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def check_subscription(context: ContextTypes, user_id: int) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–æ—Å—Ç–æ–≤ –∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
def check_post_limit_and_duplicates(user_id: int, text: str) -> tuple[bool, str]:
    now = datetime.now()
    if user_id not in user_posts:
        user_posts[user_id] = {"posts": [[text, now]], "count": 1, "date": now}
        return True, ""

    user_data = user_posts[user_id]
    if now.date() != user_data["date"].date():
        user_posts[user_id] = {"posts": [], "count": 0, "date": now}

    if user_data["count"] >= 3:
        return False, "‚ùå –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤ 3 –ø–æ—Å—Ç–∞ –∑–∞ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."

    for post, post_time in user_data["posts"]:
        if post.strip() == text.strip():
            time_diff = now - post_time
            if time_diff < timedelta(days=1):
                hours_left = 24 - time_diff.total_seconds() // 3600
                return False, f"‚ùå –≠—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª—Å—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ {int(hours_left)} —á."
            else:
                user_data["posts"] = [p for p in user_data["posts"] if p[0] != text]

    user_data["posts"].append([text, now])
    user_data["count"] += 1
    user_data["date"] = now
    return True, ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def check_message(text: str) -> tuple[bool, str]:
    text_lower = text.lower()
    if not re.search(r'@[a-zA-Z0-9_]{5,}', text):
        return False, "‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (@username). –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã."
    actions = ['–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω', '–∫—É–ø–ª—é']
    if not any(action in text_lower for action in actions):
        return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: '–ø—Ä–æ–¥–∞–º', '–æ–±–º–µ–Ω' –∏–ª–∏ '–∫—É–ø–ª—é'."
    mail_keywords = ['–ø–æ—á—Ç–∞', '–ø–æ—á—Ç—É', '—É–∫–∞–∑', '—É—Ç–µ—Ä', '—É—Ç–µ—Ä—å', '—É—Ç–µ—Ä—è']
    if not any(keyword in text_lower for keyword in mail_keywords):
        return False, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—á—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø–æ—á—Ç—É')."
    if sum(c.isupper() for c in text) / len(text) > 0.7 and len(text) > 10:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–ø—Å). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç."
    if any(word in text_lower for word in FORBIDDEN_WORDS):
        return False, "‚ùå –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π —è–∑—ã–∫ (–º–∞—Ç). –£–±–µ—Ä–∏—Ç–µ –µ–≥–æ."
    if re.search(r'(https?://|www\.|\.com|\.ru|\.org|t\.me/[a-zA-Z0-9_]+)', text) and not re.search(r't\.me/shop_mrush1', text):
        return False, "‚ùå –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã (–∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã). –£–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É."
    return True, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes):
    user_id = update.message.from_user.id
    if not await check_subscription(context, user_id):
        await update.message.reply_text(
            f"‚ùå –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}!\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
        return

    await send_welcome_message(context, update.effective_chat.id)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–º–µ—Ä–∞
async def send_welcome_message(context: ContextTypes, chat_id: int):
    greeting = (
        "ü§ñ *–ü—Ä–∏–≤–µ—Ç, —è Mrush1* ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ *–ø–æ–∫—É–ø–∫–µ, –ø—Ä–æ–¥–∞–∂–µ –∏ –æ–±–º–µ–Ω–µ –∏–≥—Ä–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤*!\n\n"
        "üìå –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, *–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏*:\n"
        "üîó [–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã](https://t.me/shop_mrush1/11)\n"
        "üîó [–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É](https://t.me/shop_mrush1/13)\n\n"
        "‚ö†Ô∏è –ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é –ø–æ—Å—Ç–∞ –∏–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ!\n\n"
        "üì∏ *–í–æ—Ç –ø—Ä–∏–º–µ—Ä, –∫–∞–∫ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç:*"
    )

    await context.bot.send_message(
        chat_id=chat_id,
        text=greeting,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

    try:
        with open(r"C:\Users\vardg\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\Python\primerbot.jpg", "rb") as photo:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=(
                    "–ü—Ä–æ–¥–∞–º –∑–∞ 100‚ÇΩ –∏–ª–∏ –æ–±–º–µ–Ω—è—é –Ω–∞ –∞–∫–∫ –ø–æ—Å–∏–ª—å–Ω–µ–µ —Å –º–æ–µ–π –¥–æ–ø–ª–∞—Ç–æ–π\n"
                    "–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø–æ—á—Ç—É\n\n"
                    "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏: @vardges_grigoryan"
                )
            )
    except FileNotFoundError:
        await context.bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes):
    user_id = update.message.from_user.id
    if not await check_subscription(context, user_id):
        await update.message.reply_text(
            f"‚ùå –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}!\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
        return

    user_message = update.message.text
    limit_ok, limit_feedback = check_post_limit_and_duplicates(user_id, user_message)
    if not limit_ok:
        await update.message.reply_text(limit_feedback)
        return

    is_valid, feedback = check_message(user_message)
    if is_valid:
        sent_message = await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=user_message)
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="new_post")]
            ])
        )
    else:
        await update.message.reply_text(f"{feedback}\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
async def handle_photo(update: Update, context: ContextTypes):
    user_id = update.message.from_user.id
    if not await check_subscription(context, user_id):
        await update.message.reply_text(
            f"‚ùå –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}!\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
        return

    caption = update.message.caption if update.message.caption else ""
    limit_ok, limit_feedback = check_post_limit_and_duplicates(user_id, caption)
    if not limit_ok:
        await update.message.reply_text(limit_feedback)
        return

    is_valid, feedback = check_message(caption)
    if is_valid:
        photo_file = update.message.photo[-1].file_id
        sent_message = await context.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=photo_file, caption=caption)
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –≥—Ä—É–ø–ø–µ!",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="new_post")]
            ])
        )
    else:
        await update.message.reply_text(f"{feedback}\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes):
    query = update.callback_query
    await query.answer()

    if query.data == "new_post":
        await query.message.reply_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é):")
    elif query.data == "check_subscription":
        user_id = query.from_user.id
        if await check_subscription(context, user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            await query.message.delete()
            await send_welcome_message(context, query.message.chat_id)
        else:
            await query.message.edit_text(
                f"‚ùå –¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ {CHANNEL_ID}. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
                ])
            )

# –û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_unknown(update: Update, context: ContextTypes):
    user_id = update.message.from_user.id
    if not await check_subscription(context, user_id):
        await update.message.reply_text(
            f"‚ùå –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}!\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
            ])
        )
    else:
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes):
    logger.error(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if isinstance(update, Update) and update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.ALL, handle_unknown))
    application.add_handler(CallbackQueryHandler(button_handler))

    application.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
